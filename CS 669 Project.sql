CREATE TABLE ADDRESS (
ADD_ID DECIMAL(12) PRIMARY KEY,
ADD_ZIPCODE DECIMAL(5),
ADD_STREET VARCHAR(255),
ADD_STATE VARCHAR(255),
ADD_CITY VARCHAR(255))

CREATE TABLE PERSON_TYPE(
TYPE_ID DECIMAL(12) PRIMARY KEY,
TYPE_DESCRIPTION VARCHAR(30))

INSERT INTO PERSON_TYPE VALUES (1, 'Doctor')
INSERT INTO PERSON_TYPE VALUES (2, 'Patient')

CREATE TABLE QUALIFICATIONS (
Q_ID DECIMAL(12) PRIMARY KEY,
Q_NAME VARCHAR(60),
Q_ABBREVIATION VARCHAR(60))

INSERT INTO QUALIFICATIONS VALUES (1, 'Bachelor of Medicine', 'B.Med')
INSERT INTO QUALIFICATIONS VALUES (2, 'Bachelor of Medicine and a Bachelor of Surgery', 'MBBS')
INSERT INTO QUALIFICATIONS VALUES (3, 'Doctor of Medicine', 'MD')
INSERT INTO QUALIFICATIONS VALUES (4, 'Doctor of Osteopathic Medicine', 'DO')
INSERT INTO QUALIFICATIONS VALUES (5, 'Master of Clinical Medicine', 'MCM')
INSERT INTO QUALIFICATIONS VALUES (6, 'Master of Medical Science', 'MMSc')
INSERT INTO QUALIFICATIONS VALUES (7, 'Doctor of Clinical Medicine', 'DCM')
INSERT INTO QUALIFICATIONS VALUES (8, 'Master of Public Health', 'MPH')
INSERT INTO QUALIFICATIONS VALUES (9, 'Master of Medicine', 'MMed')
INSERT INTO QUALIFICATIONS VALUES (10, 'Master of Public Health and Ophthalmology', 'MPHO')

CREATE TABLE PERSON (
P_ID DECIMAL(12) PRIMARY KEY,
ADD_ID DECIMAL(12) REFERENCES ADDRESS(ADD_ID),
P_LNAME VARCHAR(30),
P_FNAME VARCHAR(30),
P_MOBNUM DECIMAL(10),
P_GENDER VARCHAR(30),
P_EMOBNUM DECIMAL(10),
P_EADDRESS VARCHAR(60))

CREATE TABLE CREDIT_DEBIT_CARD (
CARD_ID DECIMAL(12) PRIMARY KEY,
CARD_NUMBER DECIMAL(16) NOT NULL,
CARD_CVC DECIMAL(3) NOT NULL,
CARD_EXPIRY DATE NOT NULL,
CARD_NAME VARCHAR(60) NOT NULL)

CREATE TABLE BILLING (
P_ID DECIMAL(12) REFERENCES PERSON(P_ID),
B_ID DECIMAL(12) PRIMARY KEY,
ADD_ID DECIMAL (12) REFERENCES ADDRESS(ADD_ID),
B_PAYMENTTYPE VARCHAR(20),
CARD_ID DECIMAL(12) REFERENCES CREDIT_DEBIT_CARD(CARD_ID),
B_PAYMENTSTATUS VARCHAR(30) NOT NULL,
B_AMOUNT DECIMAL(15,2) NOT NULL,
B_PAYMENTDATE DATETIME)

CREATE TABLE PERSON_HAS_TYPE (
HAS_ID DECIMAL(12) PRIMARY KEY,
TYPE_ID DECIMAL(12) NOT NULL REFERENCES PERSON_TYPE(TYPE_ID),
P_ID DECIMAL(12) NOT NULL REFERENCES PERSON(P_ID))

CREATE TABLE PATIENT (
P_ID DECIMAL(12) PRIMARY KEY REFERENCES PERSON(P_ID))

CREATE TABLE DOCTOR (
P_ID DECIMAL(12) PRIMARY KEY REFERENCES PERSON(P_ID),
D_OFFICEHOURS VARCHAR(30) NOT NULL,
D_DESIGNATION VARCHAR(30) NOT NULL,
D_ACCOUNTNUMBER DECIMAL(30) NOT NULL)

CREATE TABLE APPOINTMENT (
A_ID DECIMAL(12) PRIMARY KEY,
PAT_ID DECIMAL(12) NOT NULL REFERENCES PATIENT(P_ID),
DOC_ID DECIMAL(12) NOT NULL REFERENCES DOCTOR(P_ID),
A_PATIENTCOMPLAIN VARCHAR(255) NOT NULL,
A_DATETIME DATETIME NOT NULL)

CREATE TABLE DOC_HAS_QUAL (
HAS_ID DECIMAL(12) PRIMARY KEY,
Q_ID DECIMAL(12) NOT NULL REFERENCES QUALIFICATIONS(Q_ID),
P_ID DECIMAL(12) NOT NULL REFERENCES DOCTOR(P_ID))

CREATE TABLE DIAGNOSIS (
DI_ID DECIMAL(12) PRIMARY KEY,
DI_DOCDIAG VARCHAR(1024) NOT NULL,
DI_DOCMED VARCHAR(1024),
DI_NEXTAPP DATE,
DI_ADMTYPE VARCHAR(60) NOT NULL,
A_ID DECIMAL(12) NOT NULL REFERENCES APPOINTMENT(A_ID))

CREATE TABLE REFERRAL (
REF_ID DECIMAL(12),
P_ID DECIMAL(12) NOT NULL REFERENCES DOCTOR(P_ID),
DI_ID DECIMAL(12) REFERENCES DIAGNOSIS(DI_ID)
PRIMARY KEY(REF_ID, DI_ID))

CREATE INDEX PERSON_ADD_ID
ON PERSON(ADD_ID)

CREATE INDEX BILLING_P_ID
ON BILLING(P_ID)

CREATE INDEX BILLING_ADD_ID
ON BILLING(ADD_ID)

CREATE INDEX BILLING_CARD_ID
ON BILLING(CARD_ID)

CREATE INDEX PERSON_HAS_TYPE_TYPE_ID
ON PERSON_HAS_TYPE(TYPE_ID)

CREATE INDEX PERSON_HAS_TYPE_P_ID
ON PERSON_HAS_TYPE(P_ID)

CREATE INDEX APPOINTMENT_PAT_ID
ON APPOINTMENT(PAT_ID)

CREATE INDEX APPOINTMENT_DOC_ID
ON APPOINTMENT(DOC_ID)

CREATE INDEX DOC_HAS_QUAL_Q_ID
ON DOC_HAS_QUAL(Q_ID)

CREATE INDEX DOC_HAS_QUAL_P_ID
ON DOC_HAS_QUAL(P_ID)

CREATE INDEX REFERRAL_P_ID
ON REFERRAL(P_ID)

CREATE INDEX REFERRAL_DI_ID
ON REFERRAL(DI_ID)

CREATE INDEX BILLING_B_PAYMENTSTATUS
ON BILLING(B_PAYMENTSTATUS)

CREATE INDEX APPOINTMENT_A_DATETIME
ON APPOINTMENT(A_DATETIME)

CREATE INDEX DIAGNOSIS_DI_ADMTYPE
ON DIAGNOSIS(DI_ADMTYPE)

--CREATE DELETE STATEMENTS

CREATE PROCEDURE ADD_PERSON
@P_ID DECIMAL(12),
@ADD_ID DECIMAL(12),
@P_LNAME VARCHAR(30),
@P_FNAME VARCHAR(30),
@P_MOBNUM DECIMAL(10),
@P_GENDER VARCHAR(30),
@P_EMOBNUM DECIMAL(10),
@P_EADDRESS VARCHAR(60)
AS
BEGIN
INSERT INTO PERSON VALUES (@P_ID, @ADD_ID, @P_LNAME, @P_FNAME, @P_MOBNUM, @P_GENDER, @P_EMOBNUM, @P_EADDRESS)
END;

EXECUTE ADD_PERSON 10056, 980, 'Osama', 'Muhammad', 1236547890, 'Male', 4569871230, 'mosama1234@etc.com'

SELECT * FROM PERSON

CREATE PROCEDURE ADD_BILLING
@P_ID DECIMAL(12),
@B_ID DECIMAL(12),
@ADD_ID DECIMAL (12),
@B_PAYMENTTYPE VARCHAR(20),
@CARD_ID DECIMAL(12),
@B_PAYMENTSTATUS VARCHAR(30),
@B_AMOUNT DECIMAL(15,2),
@B_PAYMENTDATE DATETIME
AS
BEGIN
INSERT INTO BILLING VALUES (@P_ID, @B_ID, @ADD_ID, @B_PAYMENTTYPE, @CARD_ID, @B_PAYMENTSTATUS, @B_AMOUNT, @B_PAYMENTDATE)
END;

EXECUTE ADD_BILLING 10056, 2000, 980, 'CREDIT/DEBIT CARD', 254, 'PENDING', 5000, NULL
EXECUTE ADD_BILLING 10056, 2005, 980, 'CREDIT/DEBIT CARD', 254, 'PENDING', 5000, NULL

SELECT * FROM BILLING WHERE P_ID = 10056

CREATE PROCEDURE PENDING_AMOUNT
@P_ID DECIMAL(12)
AS
BEGIN
DECLARE
@SUM DECIMAL(15,2)
IF (EXISTS (SELECT * FROM BILLING WHERE BILLING.P_ID = @P_ID)) AND (EXISTS (SELECT * FROM BILLING WHERE P_ID = @P_ID AND BILLING.B_PAYMENTSTATUS = 'PENDING'))
BEGIN
SELECT @SUM = SUM(BILLING.B_AMOUNT) FROM BILLING WHERE P_ID = @P_ID AND BILLING.B_PAYMENTSTATUS = 'PENDING'
PRINT 'The total pending amount is $' + CAST(@SUM AS VARCHAR(MAX))
END;
IF NOT EXISTS (SELECT * FROM BILLING WHERE BILLING.P_ID = @P_ID)
BEGIN
PRINT 'There are no billings available for this person in the database'
END;
IF (EXISTS (SELECT * FROM BILLING WHERE BILLING.P_ID = @P_ID)) AND (NOT EXISTS (SELECT * FROM BILLING WHERE P_ID = @P_ID AND BILLING.B_PAYMENTSTATUS = 'PENDING'))
BEGIN
PRINT 'There are no pending bills for this person'
END;
END;

--No bills for this person id in database
EXECUTE PENDING_AMOUNT 3

--No pending bills for this person id
EXECUTE PENDING_AMOUNT 11

--Billing available
EXECUTE PENDING_AMOUNT 10056

CREATE PROCEDURE COUNT_APPOINTMENT_PER_DOCTOR
@P_ID DECIMAL(12)
AS
BEGIN
DECLARE
@COUNT1 DECIMAL(20),
@FIRSTNAME VARCHAR(30),
@LASTNAME VARCHAR(30)
IF EXISTS (SELECT * FROM DOCTOR WHERE DOCTOR.P_ID = @P_ID)
BEGIN
SELECT @COUNT1 = COUNT(*) FROM APPOINTMENT WHERE APPOINTMENT.DOC_ID = @P_ID
SELECT @FIRSTNAME = PERSON.P_FNAME, @LASTNAME = PERSON.P_LNAME FROM PERSON WHERE PERSON.P_ID = @P_ID
PRINT 'The number of appointments for DR ' + CAST(@FIRSTNAME AS VARCHAR(MAX)) + ' ' + CAST(@LASTNAME AS VARCHAR(MAX)) + ' are: ' + CAST(@COUNT1 AS VARCHAR(MAX))
END;
ELSE
BEGIN
PRINT 'Doctor by this ID does not exist'
END;
END;

--Doctor ID does not exist
EXECUTE COUNT_APPOINTMENT_PER_DOCTOR 3

--Doctor ID exists
EXECUTE COUNT_APPOINTMENT_PER_DOCTOR 5

SELECT * FROM APPOINTMENT WHERE APPOINTMENT.DOC_ID = 5

CREATE TABLE BILLING_HISTORY (
BH_ID DECIMAL(12) PRIMARY KEY,
OLD_P_ID DECIMAL(12),
NEW_P_ID DECIMAL(12),
B_ID DECIMAL(12),
OLD_ADD_ID DECIMAL(12),
NEW_ADD_ID DECIMAL(12),
OLD_B_PAYMENTTYPE VARCHAR(20),
NEW_B_PAYMENTTYPE VARCHAR(20),
OLD_CARD_ID DECIMAL(12),
NEW_CARD_ID DECIMAL(12),
OLD_B_PAYMENTSTATUS VARCHAR(30),
NEW_B_PAYMENTSTATUS VARCHAR(30),
OLD_B_AMOUNT DECIMAL(15,2),
NEW_B_AMOUNT DECIMAL(15,2),
OLD_B_PAYMENTDATE DATETIME,
NEW_B_PAYMENTDATE DATETIME,
CHANGE_DATE DATETIME NOT NULL)

CREATE TRIGGER BILLING_HISTORY_1 ON BILLING
AFTER UPDATE
AS
BEGIN
DECLARE
@OLD_P_ID DECIMAL(12) = (SELECT P_ID FROM DELETED),
@NEW_P_ID DECIMAL(12) = (SELECT P_ID FROM INSERTED),
@OLD_ADD_ID DECIMAL(12) = (SELECT ADD_ID FROM DELETED),
@NEW_ADD_ID DECIMAL(12) = (SELECT ADD_ID FROM INSERTED),
@OLD_B_PAYMENTTYPE VARCHAR(20) = (SELECT B_PAYMENTTYPE FROM DELETED),
@NEW_B_PAYMENTTYPE VARCHAR(20) = (SELECT B_PAYMENTTYPE FROM INSERTED),
@OLD_CARD_ID DECIMAL(12) = (SELECT CARD_ID FROM DELETED),
@NEW_CARD_ID DECIMAL(12) = (SELECT CARD_ID FROM INSERTED),
@OLD_B_PAYMENTSTATUS VARCHAR(30) = (SELECT B_PAYMENTSTATUS FROM DELETED),
@NEW_B_PAYMENTSTATUS VARCHAR(30) = (SELECT B_PAYMENTSTATUS FROM INSERTED),
@OLD_B_AMOUNT DECIMAL(15,2) = (SELECT B_AMOUNT FROM DELETED),
@NEW_B_AMOUNT DECIMAL(15,2) = (SELECT B_AMOUNT FROM INSERTED),
@OLD_B_PAYMENTDATE DATETIME = (SELECT B_PAYMENTDATE FROM DELETED),
@NEW_B_PAYMENTDATE DATETIME = (SELECT B_PAYMENTDATE FROM INSERTED)

IF (@OLD_P_ID = @NEW_P_ID)
BEGIN
SET @NEW_P_ID = -1
END;

IF (@OLD_B_PAYMENTTYPE = @NEW_B_PAYMENTTYPE)
BEGIN
SET @OLD_B_PAYMENTTYPE = -1
END;

IF (@OLD_ADD_ID = @NEW_ADD_ID)
BEGIN
SET @NEW_ADD_ID = -1
END;

IF (@OLD_CARD_ID = @NEW_CARD_ID)
BEGIN
SET @NEW_CARD_ID = -1
END;

IF (@OLD_B_PAYMENTSTATUS = @NEW_B_PAYMENTSTATUS)
BEGIN
SET @NEW_B_PAYMENTSTATUS = -1
END;

IF (@OLD_B_AMOUNT = @NEW_B_AMOUNT)
BEGIN
SET @NEW_B_AMOUNT = -1
END;

IF (@OLD_B_PAYMENTDATE = @NEW_B_PAYMENTDATE)
BEGIN
SET @NEW_B_PAYMENTDATE = -1
END;

INSERT INTO BILLING_HISTORY VALUES (ISNULL((SELECT MAX(BH_ID)+1 FROM BILLING_HISTORY), 1),@OLD_P_ID, @NEW_P_ID, (SELECT B_ID FROM INSERTED),
@OLD_ADD_ID, @NEW_ADD_ID, @OLD_B_PAYMENTTYPE, @NEW_B_PAYMENTTYPE, @OLD_CARD_ID, @NEW_CARD_ID, @OLD_B_PAYMENTSTATUS, @NEW_B_PAYMENTSTATUS, @OLD_B_AMOUNT,
@NEW_B_AMOUNT, @OLD_B_PAYMENTDATE, @NEW_B_PAYMENTDATE, GETDATE());
END;

SELECT * FROM BILLING WHERE P_ID = 10056

UPDATE BILLING SET B_PAYMENTSTATUS = 'PENDING' WHERE B_ID = 2000

SELECT * FROM BILLING_HISTORY

CREATE TRIGGER BILLING_CHECK ON BILLING
AFTER INSERT, UPDATE
AS
BEGIN
DECLARE
@B_PAYMENTTYPE VARCHAR(20) = (SELECT B_PAYMENTTYPE FROM INSERTED),
@B_CARDID DECIMAL(12) = (SELECT CARD_ID FROM INSERTED),
@B_PAYMENTSTATUS VARCHAR(30) = (SELECT B_PAYMENTSTATUS FROM INSERTED),
@B_PAYMENTDATE DATETIME = (SELECT B_PAYMENTDATE FROM INSERTED)

IF @B_PAYMENTTYPE NOT IN ('CASH', 'CREDIT/DEBIT CARD')
BEGIN
PRINT 'Incorrect payment method selected'
ROLLBACK
END;

IF (@B_PAYMENTTYPE = 'CREDIT/DEBIT CARD' AND @B_CARDID IS NULL) OR (@B_PAYMENTTYPE = 'CASH' AND @B_CARDID IS NOT NULL)
BEGIN
PRINT 'Payment type and card id fields have conflicting values'
ROLLBACK
END;

IF (@B_PAYMENTSTATUS = 'PENDING' AND @B_PAYMENTDATE IS NOT NULL) OR (@B_PAYMENTSTATUS = 'PAID' AND @B_PAYMENTDATE IS NULL)
BEGIN
PRINT 'Payment status and payment date fields have conflicting values'
ROLLBACK
END;

END;

INSERT INTO BILLING VALUES (10056, 2003, 980, 'CASH', 254, 'PENDING', 5000, '11/19/2021')

SELECT * FROM BILLING WHERE P_ID = 10056

--Query for net income of hospital in last 6 months
SELECT CONCAT('$', SUM(B_AMOUNT)) AS TOTAL_NET_INCOME FROM BILLING
WHERE BILLING.B_PAYMENTSTATUS = 'PAID' AND
DATEDIFF(MONTH, BILLING.B_PAYMENTDATE, GETDATE()) <= 6

--Query for number of appointments in last 6 months
SELECT COUNT(*) AS NUMBER_OF_APPOINTMENTS FROM APPOINTMENT
WHERE DATEDIFF(MONTH, APPOINTMENT.A_DATETIME, GETDATE()) <= 6